const nodemailer = require("nodemailer");
const PDFDocument = require("pdfkit");
const fs = require("fs");
const path = require("path");

exports.sendInvoice = async (req, res) => {
  const { email, data } = req.body;
  const fileName = `invoice_${Date.now()}.pdf`;
  const pdfPath = path.join(__dirname, `../../${fileName}`);

  try {
    const doc = new PDFDocument({ size: 'A4', margin: 50 });
    const writeStream = fs.createWriteStream(pdfPath);
    doc.pipe(writeStream);

    // üü¶ Header Banner
    doc
      .rect(0, 0, doc.page.width, 70)
      .fill('#0f172a')
      .fillColor('#ffffff')
      .fontSize(26)
      .text('SalesNest Invoice', 50, 20);

    doc.moveDown(2);

    // üßæ Order Details
    doc
      .fillColor('#000')
      .fontSize(14)
      .text(`Order ID: ${data.orderId}`)
      .text(`Date: ${data.date}`)
      .text(`Customer Name: ${data.name}`)
      .text(`Email: ${email}`)
      .text(`Billing Address: ${data.address || "N/A"}`)
      .text(`GSTIN: ${data.gstin || "N/A"}`)
      .moveDown(1.5);

    // Table Headers (same)
doc
.fontSize(13)
.fillColor('#ffffff')
.rect(50, doc.y, 500, 25)
.fill('#1e293b');

doc
.fillColor('#ffffff')
.text('Product', 55, doc.y - 18)
.text('Quantity', 280, doc.y - 18)
.text('Price', 350, doc.y - 18)
.text('Total', 430, doc.y - 18);

// Product Rows - with wrapping & height handling
let y = doc.y + 10;
const rowHeight = 40; // Enough for 2 lines

data.products.forEach((p, i) => {
const total = p.quantity * p.price;

// Alternate row color
doc
  .fillColor(i % 2 === 0 ? '#f1f5f9' : '#ffffff')
  .rect(50, y, 500, rowHeight)
  .fill();

// Reset fill for text
doc.fillColor('#000').fontSize(12);

doc.text(p.description, 55, y + 5, { width: 210, height: rowHeight, ellipsis: true });
doc.text(p.quantity.toString(), 280, y + 5);
doc.text(`‚Çπ${p.price.toFixed(2)}`, 350, y + 5);
doc.text(`‚Çπ${total.toFixed(2)}`, 430, y + 5);

y += rowHeight;
});


    const subtotal = data.products.reduce((sum, p) => sum + p.quantity * p.price, 0);
    const gst = +(subtotal * 0.18).toFixed(2);
    const grandTotal = +(subtotal + gst).toFixed(2);

    // üìä Totals
    doc
      .fillColor('#000')
      .fontSize(13)
      .moveDown(2)
      .text(`Subtotal: ‚Çπ${subtotal.toFixed(2)}`, { align: 'right' })
      .text(`GST (18%): ‚Çπ${gst}`, { align: 'right' })
      .font('Helvetica-Bold')
      .fontSize(15)
      .fillColor('#16a34a')
      .text(`Grand Total: ‚Çπ${grandTotal}`, { align: 'right' });

    // üìù Footer
    doc
      .moveDown(3)
      .fontSize(11)
      .fillColor('#6b7280')
      .text(`Generated by Mukund Bansal`, { align: 'center' })
      .text(`Thank you for using SalesNest.`, { align: 'center' });

    doc.end();

    writeStream.on("finish", async () => {
      try {
        let transporter = nodemailer.createTransport({
          service: "Gmail",
          auth: {
            user: process.env.EMAIL,
            pass: process.env.EMAIL_PASS,
          },
        });

        await transporter.sendMail({
          from: `"SalesNest | Mukund Bansal" <${process.env.EMAIL}>`,
          to: email,
          subject: "üßæ Your Invoice from SalesNest",
          html: `
            <div style="font-family: sans-serif; color: #333">
              <h2>Dear ${data.name},</h2>
              <p>Thank you for your purchase from <strong>SalesNest</strong>.</p>
              <p>üìé Your invoice <strong>${data.orderId}</strong> is attached as a PDF.</p>
              <p style="margin-top: 20px;">Regards,<br/>Mukund Bansal<br/><em>SalesNest Team</em></p>
            </div>
          `,
          attachments: [
            {
              filename: `SalesNest_Invoice_${data.orderId}.pdf`,
              path: pdfPath,
            },
          ],
        });

        fs.unlinkSync(pdfPath);
        res.send({ success: true });
      } catch (emailErr) {
        console.error("‚ùå Email send failed:", emailErr);
        fs.existsSync(pdfPath) && fs.unlinkSync(pdfPath);
        res.status(500).send({ success: false, error: "Failed to send email." });
      }
    });
  } catch (pdfErr) {
    console.error("‚ùå PDF generation error:", pdfErr);
    res.status(500).send({ success: false, error: "Failed to generate PDF invoice." });
  }
};
